{
  "_args": [
    [
      {
        "raw": "@microsoft/stream-collator@~1.0.2",
        "scope": "@microsoft",
        "escapedName": "@microsoft%2fstream-collator",
        "name": "@microsoft/stream-collator",
        "rawSpec": "~1.0.2",
        "spec": ">=1.0.2 <1.1.0",
        "type": "range"
      },
      "C:\\Users\\sageer\\repository\\node_modules\\@microsoft\\rush-lib"
    ]
  ],
  "_from": "@microsoft/stream-collator@>=1.0.2 <1.1.0",
  "_id": "@microsoft/stream-collator@1.0.2",
  "_inCache": true,
  "_location": "/@microsoft/stream-collator",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/stream-collator-1.0.2.tgz_1481654099499_0.8753162797074765"
  },
  "_npmUser": {
    "name": "odspnpm",
    "email": "odspnpm@microsoft.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@microsoft/stream-collator@~1.0.2",
    "scope": "@microsoft",
    "escapedName": "@microsoft%2fstream-collator",
    "name": "@microsoft/stream-collator",
    "rawSpec": "~1.0.2",
    "spec": ">=1.0.2 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@microsoft/rush-lib"
  ],
  "_resolved": "https://registry.npmjs.org/@microsoft/stream-collator/-/stream-collator-1.0.2.tgz",
  "_shasum": "42ac2b8f8cb1efd5520dddb4f451997012cb8300",
  "_shrinkwrap": null,
  "_spec": "@microsoft/stream-collator@~1.0.2",
  "_where": "C:\\Users\\sageer\\repository\\node_modules\\@microsoft\\rush-lib",
  "dependencies": {
    "@types/node": ">=6.0.51 <6.9.1",
    "colors": "~1.1.2"
  },
  "description": "Display intelligible realtime output from your asynchronous streams",
  "devDependencies": {
    "@microsoft/sp-build-node": "~0.2.0",
    "@types/chai": ">=3.4.34 <3.6.0",
    "@types/es6-collections": "^0.5.29",
    "@types/mocha": ">=2.2.33 <2.6.0",
    "chai": "~3.5.0",
    "gulp": "~3.9.1",
    "mocha": "~2.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "42ac2b8f8cb1efd5520dddb4f451997012cb8300",
    "tarball": "https://registry.npmjs.org/@microsoft/stream-collator/-/stream-collator-1.0.2.tgz"
  },
  "license": "SEE LICENSE IN LICENSE.docx",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "microsoft",
      "email": "npmjs@microsoft.com"
    },
    {
      "name": "odspnpm",
      "email": "odspnpm@microsoft.com"
    }
  ],
  "name": "@microsoft/stream-collator",
  "optionalDependencies": {},
  "readme": "## stream-collator\r\n\r\nOftentimes, when working with multiple parallel asynchronous processes, it is helpful to ensure that their\r\noutputs are not mixed together, as this can cause readability issues in the console or log. The\r\n**stream-collator** manages the output of these streams carefully, such that no two streams are writing\r\nat the same time. At any given time, one stream registered with the collator is the **active stream**\r\nwhich means that particular stream will be live streaming, while the others will wait for that stream\r\nto finish before their completion.\r\n\r\nFor example, if you have 3 streams (e.g. from using `child_process.spawn()`).\r\n\r\nStream A will write: `AAAAA`\r\n\r\nStream B will write: `BBBBBBBBBBBBBBBBBBBB`\r\n\r\nStream C will write: `CCCCCCCCCC`\r\n\r\nIf these streams are all being piped directly to stdout, you could end up with something like:\r\n\r\n`ABACCCBCCCCBBABBCBBABBBBBBCCAB`\r\n\r\n**Yikes!**\r\n\r\nMost likely, something like the following would be much more useful to users of your application:\r\n\r\n`AAAAABBBBBBBBBBBBBBBCCCCCCCCCC`\r\n\r\nThis is where the **stream-collator** comes in handy!\r\n\r\n## Installation\r\n\r\nInstall the stream-collator:\r\n\r\n`npm install --save @microsoft/stream-collator`\r\n\r\nImport the collator:\r\n\r\n```javascript\r\nimport StreamCollator from '@microsoft/stream-collator'; // es6\r\n```\r\n\r\n```javascript\r\nconst StreamCollator = require('@microsoft/stream-collator'); // commonjs\r\n```\r\n\r\n## Usage\r\n\r\nA stream collator adheres to the [NodeJS Stream API](https://nodejs.org/api/stream.html), meaning that it effectively\r\nis special type of [ReadableStream](https://nodejs.org/api/stream.html#stream_class_stream_readable). This makes\r\nworking with the stream collator very simple. Imagine we had the 3 streams from the example above:\r\n\r\n```javascript\r\nconst streamA = getRepeaterStream('A', 5); // fake helper function that returns a ReadableStream\r\nconst streamB = getRepeaterStream('B', 15); // fake helper function that returns a ReadableStream\r\nconst streamC = getRepeaterStream('C', 10); // fake helper function that returns a ReadableStream\r\n```\r\n\r\nNow, instantiate a stream collator instance and register the streams with it:\r\n\r\n```javascript\r\nconst collator = new StreamCollator();\r\n\r\ncollator.register(streamA);\r\ncollator.register(streamB);\r\ncollator.register(streamC);\r\n```\r\n\r\n`collator` is now a stream which can be accessed with the standard stream API's. For example, you could pass the output\r\nto process.stdout:\r\n\r\n`collator.pipe(process.stdout);`\r\n\r\nOr a file:\r\n\r\n```javascript\r\nvar wstream = fs.createWriteStream('myOutput.txt');\r\n\r\ncollator.pipe(wstream);\r\n```\r\n\r\n## The active stream\r\nAt any given time, a single stream is designated as the **active stream**. The output of the active stream will always be\r\nlive-streamed. This is particularly useful for long-running streams. When the active stream finishes, a new stream\r\nis selected as the active stream and all of its contents up to that point will be emitted. Whenever an active stream finishes,\r\nall background streams which have been completed will be emitted.\r\n\r\n## Helper streams\r\nTwo additional stream classes are also exported with this package:\r\n\r\n### DualTaskStream\r\nA utility string-based stream with two sub-streams, `stdout` and `stderr`. These streams can be written to, and will be emitted\r\nby this class. Anything written to `stderr` will be automatically wrapped in red coloring, unless is begins with the text `Warning -`,\r\nin which case it will write the warning to `stdout` in yellow.\r\n\r\n### PersistentStream\r\nA special string-based stream with a function `readAll()` which will return the contents of everything that has been written\r\nto the stream as a string, regardless of whether the stream is open or closed.\r\n\r\n## Improvements\r\nNOTE: Ending the collator stream could be improved with an option that lets you select between the following behaviors:\r\n* Close the collator stream when ANY registered stream has been closed\r\n* Close the collator stream when ALL registered streams have been closed\r\n* Don't automatically close the collator stream\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "gulp",
    "clean": "gulp clean",
    "test": "gulp test"
  },
  "typings": "lib/index.d.ts",
  "version": "1.0.2"
}
