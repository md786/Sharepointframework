{
  "_args": [
    [
      {
        "raw": "combokeys@2.4.6",
        "scope": null,
        "escapedName": "combokeys",
        "name": "combokeys",
        "rawSpec": "2.4.6",
        "spec": "2.4.6",
        "type": "version"
      },
      "C:\\Users\\sageer\\repository\\node_modules\\@microsoft\\sp-loader"
    ]
  ],
  "_from": "combokeys@2.4.6",
  "_id": "combokeys@2.4.6",
  "_inCache": true,
  "_location": "/combokeys",
  "_nodeVersion": "5.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/combokeys-2.4.6.tgz_1459278921088_0.20227791042998433"
  },
  "_npmUser": {
    "name": "weswinham",
    "email": "winhamwr@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "combokeys@2.4.6",
    "scope": null,
    "escapedName": "combokeys",
    "name": "combokeys",
    "rawSpec": "2.4.6",
    "spec": "2.4.6",
    "type": "version"
  },
  "_requiredBy": [
    "/@microsoft/sp-loader"
  ],
  "_resolved": "https://registry.npmjs.org/combokeys/-/combokeys-2.4.6.tgz",
  "_shasum": "a5c47599632af7a36d1d9c2f98518c95b253d83b",
  "_shrinkwrap": null,
  "_spec": "combokeys@2.4.6",
  "_where": "C:\\Users\\sageer\\repository\\node_modules\\@microsoft\\sp-loader",
  "bugs": {
    "url": "https://github.com/PolicyStat/combokeys/issues"
  },
  "contributors": [
    {
      "name": "Shahar Or",
      "email": "mightyiampresence@gmail.com",
      "url": "https://github.com/mightyiam"
    },
    {
      "name": "Craig Campbell",
      "url": "http://craig.is"
    }
  ],
  "dependencies": {},
  "description": "Handles keyboard shortcuts in the browser",
  "devDependencies": {
    "browserify": "^9.0.3",
    "es5-shim": "^4.0.3",
    "mocha": "^2.0.1",
    "phantomjs": "^1.9.12",
    "proclaim": "^3.1.0",
    "sinon": "^1.12.1",
    "standard": "*",
    "zuul": "^2.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "a5c47599632af7a36d1d9c2f98518c95b253d83b",
    "tarball": "https://registry.npmjs.org/combokeys/-/combokeys-2.4.6.tgz"
  },
  "gitHead": "5d46174289adc9171652520a8a3d0c0f83ea7183",
  "homepage": "https://github.com/PolicyStat/combokeys",
  "implements": [
    "CommonJS/Modules/1.0"
  ],
  "keywords": [
    "keyboard",
    "shortcuts",
    "events",
    "browser"
  ],
  "license": {
    "type": "Apache 2.0",
    "url": "https://www.apache.org/licenses/LICENSE-2.0.txt"
  },
  "main": "Combokeys/index.js",
  "maintainers": [
    {
      "name": "mightyiam",
      "email": "mightyiampresence@gmail.com"
    },
    {
      "name": "weswinham",
      "email": "winhamwr@gmail.com"
    }
  ],
  "name": "combokeys",
  "optionalDependencies": {},
  "readme": "# Combokeys [![Build Status](https://travis-ci.org/PolicyStat/combokeys.svg?branch=master)](https://travis-ci.org/PolicyStat/combokeys) [![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\nCombokeys is a JavaScript library for handling keyboard shortcuts in the browser.\n\nIt is licensed under the Apache 2.0 license.\n\nIt is around **1.9kb** minified and gzipped and **3.5kb** minified, has no external dependencies, and has been tested in the following browsers:\n\n- Internet Explorer 6+ (test suite works in IE9+)\n- Safari\n- Firefox\n- Chrome\n\nIt has support for ``keypress``, ``keydown``, and ``keyup`` events on specific keys, keyboard combinations, or key sequences.\n\n## Fork notice\n\nThis project was forked from [ccampbell/mousetrap](https://github.com/ccampbell/mousetrap).\n\nIt was forked because pull–requests were not being reviewed.\n\nThis fork's author intends to review pull–requests.\n\nMain changes are\n\n1. Refactored as CommonJS\n2. Doesn't automatically listen on the `document`. Instead, it is now a constructor and the element on which to listen must be provided on instantiation. Multiple instances possible.\n\n## Getting started\n\nGet it on your page:\n\n```js\nvar Combokeys;\nCombokeys = require(\"combokeys\");\n```\n\nInstantiate it for the entire page:\n\n```js\nvar combokeys = new Combokeys(document.documentElement);\n```\n\nOr, instantiate it for one or more specific elements:\n\n```js\nvar firstCombokeys = new Combokeys(document.getElementById(\"first\"));\nvar secondCombokeys = new Combokeys(document.getElementById(\"second\"));\n```\n\nAdd some combos!\n\n```js\n// single keys\ncombokeys.bind('4', function() { console.log('4'); });\nfirstCombokeys.bind(\"?\", function() { console.log('show shortcuts!'); });\nsecondCombokeys.bind('esc', function() { console.log('escape'); }, 'keyup');\n\n// combinations\ncombokeys.bind('command+shift+k', function() { console.log('command shift k'); });\n\n// map multiple combinations to the same callback\ncombokeys.bind(['command+k', 'ctrl+k'], function() {\n    console.log('command k or control k');\n    // return false to prevent default browser behavior\n    // and stop event from bubbling\n    return false;\n});\n\n// gmail style sequences\ncombokeys.bind('g i', function() { console.log('go to inbox'); });\ncombokeys.bind('* a', function() { console.log('select all'); });\n\n// any character (actual character inserted—triggered by the `keypress` event)\ncombokeys.bind('any-character', function () { console.log('some visual feedback') });\n\n// konami code!\ncombokeys.bind('up up down down left right left right b a enter', function() {\n    console.log('konami code');\n});\n```\n\nWhen you’re done with it, detach:\n\n```js\ncombokeys.detach()\n// and it will not listen on the element any more\n```\n\nYou can also bind the plus and minus keys conveniently:\n\n```js\ncombokeys.bind(['mod+plus', 'mod+minus'], function(e) {\n    e.preventDefault();\n    console.log(\"Override browser zoom!\");\n});\n```\n\n## Why Combokeys?\n\nThere are a number of other similar libraries out there so what makes this one different?\n\n- CommonJS, [NPM](https://www.npmjs.org/package/combokeys).\n- You can listen on multiple, specified elements simultaneously.\n- You are not limited to ``keydown`` events (You can specify ``keypress``, ``keydown``, or ``keyup`` or let Combokeys choose for you).\n- You can bind key events directly to special keys such as ``?`` or ``*`` without having to specify ``shift+/`` or ``shift+8`` which are not consistent across all keyboards\n- It works with international keyboard layouts\n- You can bind Gmail like key sequences in addition to regular keys and key combinations\n- You can programatically trigger key events with the ``trigger()`` method\n- It works with the numeric keypad on your keyboard\n- The code is well documented/commented\n\n### AMD usage\n\nYou can also build an AMD-compatible version by running `npm run build`. This creates a universally compatible ```dist/combokeys.js``` which, you can use via RequireJS, or include directly in a ```<script>``` tag with the global variable ```Combokeys```.\n\n## Documentation\n\nThe most complete documentation is currently at [Mousetrap, the original project's website](http://craig.is/killing/mice). At the time of this writing, the only differences are in how you get it in your page (It is now a CommonJS module which does not define a global for itself) and that you must instantiate it before binding keys.\n\nThe public API consists of `.bind`, `.unbind`, `.trigger`, `.stopCallback`, `.detach` and `.reset`.\n\n## Plugins\n\nThere are [some plugins](https://github.com/PolicyStat/combokeys/tree/master/plugins). See their individual readme files.\n\n### Bind dictionary\n\nAllows you to make multiple bindings in a single ``Combokeys.bind`` call.\n\n### Global bind\n\nAllows you to set global bindings that work even inside of input fields.\n\n### Pause/unpause\n\nAllows you to temporarily prevent Combokeys events from firing.\n\n### Record\n\nAllows you to capture a keyboard shortcut or sequence defined by a user.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PolicyStat/combokeys.git"
  },
  "scripts": {
    "build": "mkdir -p dist && browserify . -o dist/combokeys.js --standalone Combokeys",
    "lint": "standard",
    "test": "npm run lint && npm run unit && npm run build",
    "unit": "./node_modules/zuul/bin/zuul --phantom -- test"
  },
  "standard": {
    "ignore": [
      "dist/**"
    ]
  },
  "version": "2.4.6"
}
